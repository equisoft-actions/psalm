name: Psalm
description: |
  Run psalm

inputs:
  memory-limit:
    description: Memory limit for analysis
    required: false
  php-version:
    description: |
      Set the php version Psalm should assume when checking and/or fixing the project.
      ex: "8.1"
    required: false
  extra-args:
    description: Extra arguments to pass to the psalm binary
    required: false
  default-branch:
    description: "Default branch to compute changed files"
    required: true
    default: "main"
  only-changed-files:
    description: |
      Run psalm analysis only on changed files compared to default branch(main). Or previous commit for main branch.
      With this option, if fetch-depth is not set or greater than 0 you can add a step to fetch the origin/main branch
      ```yaml
      - name : Fetch origin/main
        run : |
          git fetch --no-tags --prune --depth=1000 origin +refs/heads/main:refs/remotes/origin/main
      ```
    required: false
    default: 'false'
  changed-files-pattern:
    description: File path pattern.
    default: \.php
    required: true
  changed-files-threshold:
    description: If changed file count is greater than this number, perform a full phpcs.
    default: '150'
    required: true
  working-directory:
    description: "Workflow working directory"
    default: '.'
    required: false

runs:
  using: "composite"
  steps:
    - name: psalm
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        command_string=(./vendor/bin/psalm --output-format=github)

        if [ -n "${{ inputs.memory-limit }}" ]
        then
          command_string+=(--memory-limit="${{ inputs.memory-limit }}")
        fi

        if [ -n "${{ inputs.php-version }}" ]
        then
          command_string+=(--php-version="${{ inputs.php-version }}")
        fi

        if [ -n "${{ inputs.extra-args }}" ]
        then
          command_string+=(${{ inputs.extra-args }})
        fi

        if [[ "${{ inputs.only-changed-files }}" == "true" ]] ; then
          CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          if [[ "$CURRENT_BRANCH" == "${{ inputs.default-branch }}" ]] ; then
            echo "Running psalm on all files"
          else
            # Compute changed files
            if [[ -n "${GITHUB_BASE_REF}" ]]; then
              DIFF_TARGET="origin/$GITHUB_BASE_REF..."
            else
              DIFF_TARGET="origin/${{ inputs.default-branch }}..."
            fi

            # Allow to fail early if DIFF_TARGET not found on repo
            git rev-parse $DIFF_TARGET > /dev/null 2>&1 || { echo "Diff target not found '$DIFF_TARGET'. You probably miss a git fetch step." > /dev/stderr; exit 1; }

            # Get changed files which match the pattern.
            # NOTE:
            # `|| :` is used to avoid exit by grep, when no line matches the pattern.
            CHANGED_FILES=$(git diff $DIFF_TARGET --diff-filter=AM --name-only --no-color | grep -e "${{ inputs.changed-files-pattern }}" || :)
            NUM_CHANGED_FILES=$(echo "$CHANGED_FILES" | grep -v -e '^\s*$' | wc -l || :)
            if [[ $NUM_CHANGED_FILES -le 0 ]] ; then
              echo "No file changes. Skip psalm."
              exit 0
            elif [[ $NUM_CHANGED_FILES -le ${{ inputs.changed-files-threshold }} ]] ; then
              echo "Running psalm on changed files"
              echo "$CHANGED_FILES"
              command_string+=(-- $CHANGED_FILES)
            else
              echo "Running psalm on all files"
            fi
          fi
        fi

        echo "Command: " "${command_string[@]}"
        ${command_string[@]}
